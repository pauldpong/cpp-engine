#version 330 core

in vec2 textureCoords;
in vec3 surfaceNormal;
in vec3 lightVector;
in vec3 viewVector;
in float visibility;

out vec4 outColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float reflectivity;
uniform float shine;
uniform vec3 skyColor;

void main() {

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(lightVector);
    vec3 unitViewVector = normalize(viewVector);

    vec3 halfVector = (unitViewVector + unitLightVector) / length(unitViewVector + unitLightVector);

    vec3 specular = max(pow(dot(halfVector, unitNormal), shine), 0.0) * reflectivity * lightColor;
    vec3 diffuse = max(dot(unitNormal, unitLightVector), 0.2) * lightColor;

    outColor = vec4(specular, 1.0) + vec4(diffuse, 1.0) * texture(textureSampler, textureCoords);
    outColor = mix(vec4(skyColor, 1.0), outColor, visibility);
}